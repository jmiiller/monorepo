name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      app:
        description: 'Specific app to deploy (leave blank for all)'
        required: false
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      apps-to-deploy: ${{ steps.generate-matrix.outputs.apps-to-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate deployment matrix
        id: generate-matrix
        run: |
          if [ -n "${{ github.event.inputs.app }}" ]; then
            echo "apps-to-deploy=[\"${{ github.event.inputs.app }}\"]" >> $GITHUB_OUTPUT
          else
            apps=$(jq -r '.name' apps/*/package.json | jq -R -s -c 'split("\n")[:-1]')
            echo "apps-to-deploy=$apps" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: setup
    if: needs.setup.outputs.apps-to-deploy != '[]'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    
    strategy:
      matrix:
        app: ${{ fromJson(needs.setup.outputs.apps-to-deploy) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}-${{ strategy.job-index }}

      - name: Validate IAM Role Access
        run: aws sts get-caller-identity
      
      - name: Debug AWS environment
        run: |
          echo "AWS_REGION: $AWS_REGION"
          echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
          echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:+[SET]}"
          echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:+[SET]}"
          echo "AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:+[SET]}"
          aws configure list

      - name: Deploy ${{ matrix.app }}
        env:
          TERRAFORM_WORKSPACE: ${{ vars.TERRAFORM_WORKSPACE }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ vars.TURBO_TEAM }}
        run: pnpm run deploy --filter=${{ matrix.app }}
